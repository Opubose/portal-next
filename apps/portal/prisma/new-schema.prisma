datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider = "typegraphql-prisma"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
                                                //separate data type for primary key. By default   
                                                //id is specified by _id. ObjectId = specific for MongoDB
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String 
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model EventReservation {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String
    event     Event   @relation(fields: [eventId], references: [id])
    eventId   String
    status    String

    @@unique([profileId, eventId])
    @@map("event_reservations")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Role {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    roleName String

    RolesOnUser RolesOnUser[]

    @@map("roles")
}

model RolesOnUser {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    role      Role     @relation(fields: [roleId], references: [id])
    roleId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@unique([userId, roleId])
}

model User {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    roles         RolesOnUser[]

    applications    UserAppJunction[]   @relation("UserLink")

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    firstName        String
    lastName         String
    email            String    @unique
    netid            String    @unique
    classStanding    String
    major            String
    utdStudent       Boolean
    roles            String[]
    membershipStatus Boolean
    membershipTS     DateTime?
    resume           Boolean
    resumeTS         DateTime?

    user User @relation(fields: [userId], references: [id])

    userId String             @unique @db.ObjectId
    events EventReservation[]

    officerId   String             @unique @db.ObjectId
    officer     Officer            @relation(fields: [officerId], references: [id])
}

model Event {
    id          String             @id @default(auto()) @map("_id") @db.ObjectId
    summary     String
    description String
    url         String
    location    String
    start       DateTime
    end         DateTime
    profiles    EventReservation[]

    @@map("events")
}

model TypeformApplication {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    active              Boolean
    description         String
    endpoint            String
    externalResourceUrl String
    typeformId          String
    typeformName        String

    @@map("typeform_applications")
}

model Application {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime
    expireDate          DateTime
    type                String?
    role                String?

    users               UserAppJunction[]   @relation("AppLink")
    departments         UserAppJunction[]   @relation("AppLink")

    @@map("applications")
}

model Department {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    deptName            String

    officers            Officer[]
    applications        UserAppJunction[]   @relation("DeptLink")

    @@map("departments")
}

model Officer {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    deptId              String

    profile             Profile?
    departments         Department[]

    @@map("officers")
}

// if explicit m-to-n relations are needed:
// model OffDeptJunction {
//    officerId           String  
//    officer             Officer    @relation(fields: [officerId], references: [id])

//    deptId              String
//    dept                Dept    @relation(fields: [deptId], references: [id])

//    @@id([officerId, deptId])   @map("_id") @db.ObjectId
//}

model UserAppJunction {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    
    userId              String  
    user                User    @relation("UserLink", fields: [userId], references: [id])

    formId              String 
    form                Form    @relation("AppLink",  fields: [formId], references: [id]) 

    deptId              String
    dept                Dept    @relation("DeptLink", fields: [deptId], references: [id])

    responses           String?
    status              String
    score               Int?
    first               String  
    second              String
    third               String
    notes               String?

    interview           Interview?

    //@@id([userId, formId, deptId])      @map("_id") @db.ObjectId
}

model Interview {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    interDate           String
    status              String
    link                String
    
    appId               String  @unique
    application         UserAppJunction     @relation(fields: [appId], references: [id])
    }
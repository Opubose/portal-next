datasource db {
    provider             = "mysql"
    url                  = env("PSCALE_DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

generator typegraphql {
    provider = "typegraphql-prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
    id       String        @id @default(cuid())
    roleName String
    users    RolesOnUser[]
}

model RolesOnUser {
    role      Role     @relation(fields: [roleId], references: [id])
    roleId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@id([userId, roleId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    roles         RolesOnUser[]

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id               String    @id @default(cuid())
    firstName        String
    lastName         String
    email            String    @unique
    netid            String    @unique
    classStanding    String
    major            String
    utdStudent       Boolean
    role             String    @default("user")
    membershipStatus Boolean
    membershipTS     DateTime?
    resume           Boolean
    resumeTS         DateTime?

}

model Event {
    id          String   @id @default(cuid())
    summary     String
    description String
    url         String
    location    String
    start       DateTime
    end         DateTime
}

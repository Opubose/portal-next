# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
Indicate whether the SignedURL will be for uploading, downloading, or deleting.
"""
enum Action {
  DELETE
  DOWNLOAD
  UPLOAD
}

type Application {
  _id: ObjectId!
  active: Boolean!
  dateEnd: DateTime!
  dateStart: DateTime!
  description: String!
  name: String!
  questions: [ApplicationQuestion!]!
  submissions: [Submission!]!
  subtitle: String!
}

input ApplicationFilter {
  _id: ObjectId
  active: Boolean

  """Filter all applications that close after this date value"""
  closeAfter: DateTime
  name: String
}

input ApplicationInputType {
  _id: ObjectId!
  active: Boolean!
  dateEnd: DateTime!
  dateStart: DateTime!
  description: String!
  name: String!
  questions: [ApplicationQuestionInputType!]!
  subtitle: String!
}

type ApplicationQuestion {
  answers: [String!]
  question: String!
  questionType: String!
}

input ApplicationQuestionInputType {
  answers: [String!]
  question: String!
  questionType: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DiscordMeta {
  discriminator: String!
  snowflake: String!
  username: String!
}

type Event {
  _id: ObjectId
  checkIn: [User!]!
  description: String
  end: DateTime
  location: String
  rsvp: [User!]!
  start: DateTime
  summary: String!
  url: String
}

input EventInput {
  _id: ObjectId
  description: String
  end: DateTime
  location: String
  start: DateTime
  summary: String!
  url: String
}

type EventMeta {
  SUMMARY: String
  checkedIn: Boolean!
  checkedInTS: DateTime
  eventId: ObjectId!
  rsvp: Boolean!
  rsvpTS: DateTime
  userId: ObjectId!
}

"""Types of files or documents that may be uploaded to Google Cloud."""
enum FileCategory {
  RESUME
}

type Graduation {
  semester: String!
  year: String!
}

input GraduationInputType {
  semester: String!
  year: String!
}

type Mutation {
  checkinEvent(eventId: ObjectId!, userId: ObjectId!): EventMeta!
  createApplication(application: ApplicationInputType!): Application!
  createEvent(event: EventInput!): Event!
  createProfile(profile: PartialProfile!): Profile!
  rsvpEvent(eventId: ObjectId!, userId: ObjectId!): EventMeta!
  submitApplication(submitInput: SubmitInput!): Submission!
  transferFile(options: SignedURLInput!): SignedURL!
  upsertDiscordMeta(userId: String!): Profile!
}

"""Mongo object id scalar type"""
scalar ObjectId

input PartialProfile {
  classStanding: String!
  email: String!
  firstName: String!
  graduation: GraduationInputType!
  lastName: String!
  major: String!
  netid: String!
  user: ObjectId!
  utdStudent: Boolean!
}

type Profile {
  _id: ObjectId!
  classStanding: String!
  discordMeta: DiscordMeta
  email: String!
  firstName: String!
  graduation: Graduation!
  lastName: String!
  major: String!
  membershipStatus: Boolean!
  membershipTS: DateTime
  netid: String!
  resume: Boolean!
  resumeTS: DateTime
  roles: [String!]!
  user: User!
  utdStudent: Boolean!
}

type Query {
  applications(filter: ApplicationFilter): [Application!]!
  events: [Event!]!
  me: User!
  profiles(profileIds: [String!]!): [Profile!]!
  submissions(filter: SubmissionFilter): [Submission!]!
  upcomingEvents: [Event!]!
  users(filter: UserFilter): [User!]!
}

type SignedURL {
  action: Action
  fileType: FileCategory
  url: String
}

input SignedURLInput {
  action: Action
  fileType: FileCategory
}

type Submission {
  _id: ObjectId!
  application: Application!
  applicationStatus: String!
  author: User!
  createdAt: DateTime!
  modifiedAt: DateTime!
  responses: [String!]!
}

input SubmissionFilter {
  _id: ObjectId
  applicationId: ObjectId
  applicationStatus: String
  userId: ObjectId
}

input SubmitInput {
  applicationId: ObjectId!
  responses: [String!]!
  userId: ObjectId!
}

type User {
  _id: ObjectId!
  checkIn: [Event!]!
  email: String!
  emailVerified: Boolean
  hasProfile: Boolean!
  image: String!
  name: String!
  profile: Profile
  rsvp: [Event!]!
  submissions: [Submission!]!
}

input UserFilter {
  _id: ObjectId
  email: String
  name: String
}
